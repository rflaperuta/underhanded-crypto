RPM sees error strings of exceptions raised on signature verification
failure as opaque data (i.e., all tests still pass). Yum, on the other
hand, interfaces with RPM for PGP signature checks (among other things)
and relies upon those error strings in a peculiar way. The following is
Yum's signature verification function:

def checkSig(ts, package):
    """Takes a transaction set and a package, check it's sigs,
    return 0 if they are all fine
    return 1 if the gpg key can't be found
    return 2 if the header is in someway damaged
    return 3 if the key is not trusted
    return 4 if the pkg is not gpg or pgp signed"""

    value = 0
    currentflags = ts.setVSFlags(0)
    fdno = os.open(package, os.O_RDONLY)
    try:
        hdr = ts.hdrFromFdno(fdno)
    except rpm.error, e:
        if str(e) == "public key not availaiable":
            value = 1
        if str(e) == "public key not available":
            value = 1
        if str(e) == "public key not trusted":
            value = 3
        if str(e) == "error reading package header":
            value = 2
    else:
        error, siginfo = getSigInfo(hdr)
        if error == 101:
            os.close(fdno)
            del hdr
            value = 4
        else:
            del hdr

    try:
        os.close(fdno)
    except OSError, e: # if we're not opened, don't scream about it
        pass

    ts.setVSFlags(currentflags) # put things back like they were before
    return value


My patch modifies the method hdrFromFdno (and hdrCheck, but only for
symmetry) to raise an exception with an error string that Yum doesn't
know about. All conditionals in the except block are then passed over
and the variable value stays at 0 (i.e., "all fine"): verification of
a signature issued by some unknown key now always succeeds. Mere data
corruption triggers a regular verification failure, which helps
maintain the illusion that the check still works.

There are some mitigating factors: Red Hat Enterprise Linux and Fedora
protect the integrity of packages installed from official repositories
by additional means, the ultimate trust anchor being TLS. Third-party
repos (e.g., Adobe's), on the other hand, don't go to such lengths, so
a machine running proprietary software installed from a repo is almost
always vulnerable. RPM also outputs a warning for the failed signature
verification, but it often won't be visible until it's too late (e.g.,
if the manipulated package gets installed by an automatic update). The
best mitigation is, of course, a competent maintainer that rejects my
patch after researching what the comment about "backwards compatibly
broken exceptions" is supposed to convey.
